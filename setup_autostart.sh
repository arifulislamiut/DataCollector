#!/bin/bash

# Host Controller Auto-start Setup Script
# This script configures the Host Controller to run automatically after boot

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${GREEN}Host Controller Auto-start Setup${NC}"
echo "=================================="

# Get the current directory (where the script is located)
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
HOST_CONTROLLER_PATH="$SCRIPT_DIR/host_controller.py"

# Check if host_controller.py exists
if [ ! -f "$HOST_CONTROLLER_PATH" ]; then
    echo -e "${RED}Error: host_controller.py not found in $SCRIPT_DIR${NC}"
    echo "Please run this script from the directory containing host_controller.py"
    exit 1
fi

# Look for virtual environment
VENV_PATH=""
PYTHON_CMD="python3"

# Check for common venv locations
for venv_name in "venv" ".venv" "env" ".env"; do
    if [ -d "$SCRIPT_DIR/$venv_name" ]; then
        VENV_PATH="$SCRIPT_DIR/$venv_name"
        echo -e "${GREEN}Found virtual environment: $VENV_PATH${NC}"
        break
    fi
done

# If no venv found in script directory, check parent directory
if [ -z "$VENV_PATH" ]; then
    PARENT_DIR="$(dirname "$SCRIPT_DIR")"
    for venv_name in "venv" ".venv" "env" ".env"; do
        if [ -d "$PARENT_DIR/$venv_name" ]; then
            VENV_PATH="$PARENT_DIR/$venv_name"
            echo -e "${GREEN}Found virtual environment: $VENV_PATH${NC}"
            break
        fi
    done
fi

# Set Python command based on venv
if [ -n "$VENV_PATH" ]; then
    if [ -f "$VENV_PATH/bin/python" ]; then
        PYTHON_CMD="$VENV_PATH/bin/python"
        echo "Using Python from virtual environment"
    else
        echo -e "${YELLOW}Warning: Virtual environment found but no python executable${NC}"
        VENV_PATH=""
    fi
else
    echo -e "${YELLOW}No virtual environment found, using system Python${NC}"
    # Check if Python3 is available
    if ! command -v python3 &> /dev/null; then
        echo -e "${RED}Error: python3 is not installed or not in PATH${NC}"
        echo "Please install Python 3 or activate your virtual environment"
        exit 1
    fi
fi

# Check for required Python packages
echo "Checking Python dependencies..."
if [ -n "$VENV_PATH" ]; then
    "$PYTHON_CMD" -c "import PyQt5, serial" 2>/dev/null || {
        echo -e "${YELLOW}Warning: Required Python packages may not be installed in venv${NC}"
        echo "You may need to run: $VENV_PATH/bin/pip install PyQt5 pyserial"
    }
else
    python3 -c "import PyQt5, serial" 2>/dev/null || {
        echo -e "${YELLOW}Warning: Required Python packages may not be installed${NC}"
        echo "You may need to install: pip3 install PyQt5 pyserial"
    }
fi

# Create the startup script
STARTUP_SCRIPT="$SCRIPT_DIR/start_host_controller.sh"
echo "Creating startup script at: $STARTUP_SCRIPT"

cat > "$STARTUP_SCRIPT" << EOF
#!/bin/bash

# Host Controller Startup Script
# Generated by setup_autostart.sh

# Set up environment
export DISPLAY=:0
export HOME=\$(eval echo ~\$USER)

# Change to script directory
cd "$SCRIPT_DIR"

# Wait for system to fully boot (optional delay)
sleep 10

# Activate virtual environment if available
if [ -n "$VENV_PATH" ] && [ -f "$VENV_PATH/bin/activate" ]; then
    echo "\$(date): Activating virtual environment: $VENV_PATH" >> "\$HOME/host_controller_startup.log"
    source "$VENV_PATH/bin/activate"
    PYTHON_CMD="$VENV_PATH/bin/python"
else
    PYTHON_CMD="python3"
fi

# Start Host Controller with logging
echo "\$(date): Starting Host Controller with \$PYTHON_CMD" >> "\$HOME/host_controller_startup.log"
\$PYTHON_CMD "$HOST_CONTROLLER_PATH" >> "\$HOME/host_controller.log" 2>&1 &

# Log startup
echo "\$(date): Host Controller started (PID: \$!)" >> "\$HOME/host_controller_startup.log"
EOF

# Make the startup script executable
chmod +x "$STARTUP_SCRIPT"
echo -e "${GREEN}✓${NC} Startup script created and made executable"

# Add to crontab
echo "Adding to crontab..."

# Create a temporary cron file
TEMP_CRON=$(mktemp)

# Get existing crontab (if any) and add our entry
(crontab -l 2>/dev/null || true) > "$TEMP_CRON"

# Check if our entry already exists
if grep -q "start_host_controller.sh" "$TEMP_CRON"; then
    echo -e "${YELLOW}Host Controller entry already exists in crontab${NC}"
    echo "Updating existing entry..."
    # Remove old entry
    grep -v "start_host_controller.sh" "$TEMP_CRON" > "${TEMP_CRON}.tmp" || true
    mv "${TEMP_CRON}.tmp" "$TEMP_CRON"
fi

# Add our entry
echo "@reboot $STARTUP_SCRIPT" >> "$TEMP_CRON"

# Install the new crontab
crontab "$TEMP_CRON"
rm "$TEMP_CRON"

echo -e "${GREEN}✓${NC} Added to crontab successfully"

# Create log rotation script (optional)
LOG_ROTATE_SCRIPT="$SCRIPT_DIR/rotate_logs.sh"
cat > "$LOG_ROTATE_SCRIPT" << 'EOF'
#!/bin/bash
# Log rotation script for Host Controller

LOG_FILE="$HOME/host_controller.log"
STARTUP_LOG="$HOME/host_controller_startup.log"

# Rotate main log if it's larger than 10MB
if [ -f "$LOG_FILE" ] && [ $(stat -f%z "$LOG_FILE" 2>/dev/null || stat -c%s "$LOG_FILE" 2>/dev/null || echo 0) -gt 10485760 ]; then
    mv "$LOG_FILE" "${LOG_FILE}.old"
    touch "$LOG_FILE"
    echo "$(date): Log rotated" >> "$LOG_FILE"
fi

# Keep only last 100 lines of startup log
if [ -f "$STARTUP_LOG" ]; then
    tail -n 100 "$STARTUP_LOG" > "${STARTUP_LOG}.tmp"
    mv "${STARTUP_LOG}.tmp" "$STARTUP_LOG"
fi
EOF

chmod +x "$LOG_ROTATE_SCRIPT"

echo ""
echo -e "${GREEN}Setup Complete!${NC}"
echo "=================="
echo "• Host Controller will now start automatically after boot"
echo "• Startup script: $STARTUP_SCRIPT"
if [ -n "$VENV_PATH" ]; then
    echo "• Using virtual environment: $VENV_PATH"
    echo "• Python executable: $PYTHON_CMD"
else
    echo "• Using system Python: $PYTHON_CMD"
fi
echo "• Logs will be written to: ~/host_controller.log"
echo "• Startup events logged to: ~/host_controller_startup.log"
echo ""
echo -e "${YELLOW}Additional Information:${NC}"
echo "• To view current crontab: crontab -l"
echo "• To remove auto-start: crontab -e (then delete the @reboot line)"
echo "• To test startup script: $STARTUP_SCRIPT"
echo "• To view logs: tail -f ~/host_controller.log"
echo "• To view startup logs: tail -f ~/host_controller_startup.log"
echo ""
echo -e "${YELLOW}Note:${NC} The application will start 10 seconds after boot to ensure"
echo "the desktop environment is fully loaded."

if [ -n "$VENV_PATH" ]; then
    echo ""
    echo -e "${YELLOW}Virtual Environment Detected:${NC}"
    echo "Make sure your venv has the required packages installed:"
    echo "  source $VENV_PATH/bin/activate"
    echo "  pip install PyQt5 pyserial"
fi