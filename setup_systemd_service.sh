#!/bin/bash

# Industrial Host Controller Service Setup
# Creates a systemd service for reliable auto-start

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo -e "${GREEN}Industrial Host Controller Service Setup${NC}"
echo "=========================================="

# Check if running as root
if [ "$EUID" -ne 0 ]; then
    echo -e "${RED}This script must be run as root (use sudo)${NC}"
    echo "sudo $0"
    exit 1
fi

# Get the actual user who called sudo
ACTUAL_USER="${SUDO_USER:-$(logname 2>/dev/null || whoami)}"
ACTUAL_HOME="$(eval echo ~$ACTUAL_USER)"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
HOST_CONTROLLER_PATH="$SCRIPT_DIR/host_controller.py"

echo "Setting up service for user: $ACTUAL_USER"
echo "Script directory: $SCRIPT_DIR"

# Check if host_controller.py exists
if [ ! -f "$HOST_CONTROLLER_PATH" ]; then
    echo -e "${RED}Error: host_controller.py not found in $SCRIPT_DIR${NC}"
    exit 1
fi

# Find virtual environment
VENV_PATH=""
for venv_name in "venv" ".venv" "env" ".env"; do
    if [ -d "$SCRIPT_DIR/$venv_name" ]; then
        VENV_PATH="$SCRIPT_DIR/$venv_name"
        echo -e "${GREEN}Found virtual environment: $VENV_PATH${NC}"
        break
    fi
done

# Create the service wrapper script
SERVICE_SCRIPT="/usr/local/bin/host-controller-service.sh"
echo "Creating service script: $SERVICE_SCRIPT"

cat > "$SERVICE_SCRIPT" << EOF
#!/bin/bash

# Host Controller Service Wrapper
# Generated by setup_systemd_service.sh

# Logging function
log_message() {
    echo "\$(date '+%Y-%m-%d %H:%M:%S'): \$1" >> /var/log/host-controller.log
}

log_message "Host Controller service starting..."

# Wait for X server to be available
DISPLAY_READY=false
for i in {1..30}; do
    if [ -n "\$DISPLAY" ] && xset q >/dev/null 2>&1; then
        DISPLAY_READY=true
        log_message "Display \$DISPLAY is ready"
        break
    fi
    
    # Try common display numbers
    for display in ":0" ":1"; do
        if DISPLAY=\$display xset q >/dev/null 2>&1; then
            export DISPLAY=\$display
            DISPLAY_READY=true
            log_message "Found display: \$display"
            break 2
        fi
    done
    
    log_message "Waiting for X server... attempt \$i/30"
    sleep 2
done

if [ "\$DISPLAY_READY" != "true" ]; then
    log_message "ERROR: No X server found after 60 seconds"
    exit 1
fi

# Set up environment
export HOME="$ACTUAL_HOME"
export USER="$ACTUAL_USER"
cd "$SCRIPT_DIR"

# Activate virtual environment if available
if [ -n "$VENV_PATH" ] && [ -f "$VENV_PATH/bin/activate" ]; then
    log_message "Activating virtual environment: $VENV_PATH"
    source "$VENV_PATH/bin/activate"
    PYTHON_CMD="$VENV_PATH/bin/python"
else
    PYTHON_CMD="python3"
fi

log_message "Starting Host Controller with \$PYTHON_CMD as user $ACTUAL_USER"

# Change to the actual user and start the application
exec sudo -u "$ACTUAL_USER" -H \
    env DISPLAY="\$DISPLAY" HOME="$ACTUAL_HOME" \
    "\$PYTHON_CMD" "$HOST_CONTROLLER_PATH" 2>&1 | \
    while IFS= read -r line; do
        echo "\$(date '+%Y-%m-%d %H:%M:%S'): \$line" >> /var/log/host-controller.log
    done
EOF

chmod +x "$SERVICE_SCRIPT"
echo -e "${GREEN}✓${NC} Service script created"

# Create the systemd service file
SERVICE_FILE="/etc/systemd/system/host-controller.service"
echo "Creating systemd service: $SERVICE_FILE"

cat > "$SERVICE_FILE" << EOF
[Unit]
Description=Industrial Host Controller Application
After=graphical-session.target
Wants=graphical-session.target
StartLimitInterval=0

[Service]
Type=simple
User=root
Environment=DISPLAY=:0
ExecStartPre=/bin/sleep 10
ExecStart=$SERVICE_SCRIPT
Restart=always
RestartSec=5
StandardOutput=journal
StandardError=journal
KillMode=mixed
TimeoutStopSec=10

# Ensure service has access to hardware
SupplementaryGroups=dialout plugdev

[Install]
WantedBy=graphical.target
EOF

echo -e "${GREEN}✓${NC} Systemd service file created"

# Create log directory and set permissions
touch /var/log/host-controller.log
chown "$ACTUAL_USER:$ACTUAL_USER" /var/log/host-controller.log
echo -e "${GREEN}✓${NC} Log file created"

# Reload systemd and enable the service
systemctl daemon-reload
systemctl enable host-controller.service
echo -e "${GREEN}✓${NC} Service enabled"

# Remove old cron job if it exists
echo "Cleaning up old cron job..."
crontab -l 2>/dev/null | grep -v "start_host_controller.sh" | crontab - 2>/dev/null || true
echo -e "${GREEN}✓${NC} Old cron job removed"

echo ""
echo -e "${GREEN}Industrial Service Setup Complete!${NC}"
echo "========================================"
echo "• Service name: host-controller.service"
echo "• Service script: $SERVICE_SCRIPT"
echo "• Will start automatically after boot"
echo "• Logs: /var/log/host-controller.log"
echo "• Runs as user: $ACTUAL_USER"
if [ -n "$VENV_PATH" ]; then
    echo "• Virtual environment: $VENV_PATH"
fi
echo ""
echo -e "${YELLOW}Service Management Commands:${NC}"
echo "• Start service: sudo systemctl start host-controller"
echo "• Stop service: sudo systemctl stop host-controller"
echo "• Check status: sudo systemctl status host-controller"
echo "• View logs: sudo journalctl -u host-controller -f"
echo "• View app logs: tail -f /var/log/host-controller.log"
echo "• Disable service: sudo systemctl disable host-controller"
echo ""
echo -e "${YELLOW}Testing:${NC}"
echo "• Test now: sudo systemctl start host-controller"
echo "• Check if running: ps aux | grep host_controller"
echo ""
echo -e "${GREEN}The service will start automatically on next boot!${NC}"
